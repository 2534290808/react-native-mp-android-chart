/**
 *
 * @providesModule MPChart
 * @flow
 */
'use strict';


var NativeMethodsMixin = require('NativeMethodsMixin');
var Platform = require('Platform');
var React = require('React');
var ReactInstanceMap = require('ReactInstanceMap');
var ReactNativeViewAttributes = require('ReactNativeViewAttributes');
var StyleSheetPropType = require('StyleSheetPropType');
var TextStylePropTypes = require('TextStylePropTypes');
var Touchable = require('Touchable');

var createReactNativeComponentClass = require('createReactNativeComponentClass');
var merge = require('merge');

var stylePropType = StyleSheetPropType(TextStylePropTypes);

var chartsTypeMap = {};
chartsTypeMap['line'] = 'MPAndroidLineChart';
chartsTypeMap['bar'] = 'MPAndroidBarChart';
chartsTypeMap['pie'] = 'MPAndroidPieChart';

var viewConfig = {
  validAttributes: merge(ReactNativeViewAttributes.UIView, {
    dataSource : true,
    xAxis : true,
    yAxis : true,
    legend : true,
    chartStyles : true
  }),
};

var MPChart = React.createClass({
  propTypes: {
    style: stylePropType,
    testID: React.PropTypes.string,
  },
  viewConfig: viewConfig,
  getInitialState: function(): Object {
    return {
        type : 'line',
    };
  },

  render: function() {
    var props = {};
    for (var key in this.props) {
      props[key] = this.props[key];
    }

    var type = props.type ? props.type : this.state.type;
    viewConfig.uiViewClassName = chartsTypeMap[type];

    props['dataSource'] = JSON.stringify(props['dataSource']);
    props['xAxis'] = JSON.stringify(props['xAxis']);
    props['yAxis'] = JSON.stringify(props['yAxis']);
    props['legend'] = JSON.stringify(props['legend']);
    props['chartStyles'] = JSON.stringify(props['chartStyles']);

    return <BarMPChart {...props} />;
  },
});

var BarMPChart = createReactNativeComponentClass(viewConfig);

module.exports = MPChart;